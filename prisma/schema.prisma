// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_DATABASE_URL")
}

// Énumérations
enum SubscriptionArgumentType {
  NEGATIVE
  POSITIVE
}

enum SubscriptionType {
  MONTHLY
  YEARLY
}

enum ReservationStatus {
  CANCELED
  PENDING
  DONE
}

enum UserRole {
  PERSONAL
  PROFESSIONAL
  ADMINISTRATOR
}

enum ProductType {
  POST
  ADDITIONAL_SERVICE
  FORMATION
  BUSINESS_BOOSTER
}

// Modèles
model User {
  id                   String                  @id @default(cuid())
  stripeCustomerId     String?
  image                String
  gallery              String[]
  role                 UserRole
  username             String                  @unique
  firstName            String
  lastName             String
  address              Json
  billingAddress       Json?
  enterprise           String?
  homeServiceOnly      Boolean                 @default(false)
  email                String                  @unique
  password             String?
  forgotPassword       String                  @unique @default(uuid())
  phone                String
  website              String?
  nameOfSociety        String?
  services             Service[]
  orders               Order[]
  reviewsWritten       Review[]                @relation("ReviewsWritten")
  reviewsReceived      Review[]                @relation("ReviewsReceived")
  cart                 Cart?
  preferences          Json?
  preferencesProWeekId String?                 @unique
  preferencesProWeek   PreferencesProWeek?     @relation(fields: [preferencesProWeekId], references: [id])
  mark                 Float?
  forfaitSuscribeFreeAvailible   Boolean?
  numberOfRate         Int?
  socialMedia          Json?
  biography            String?
  subscription         SubscriptionType?
  createdAt            DateTime                @default(now())
  updatedAt            DateTime?               @updatedAt
  reservations         ReservationServicePro[]
  clients              Client[]                @relation("ProfessionalClients")
  clientUsers          Client[]                @relation("ClientUserRelation")
  notifications Notification[] 
}

model PreferencesProWeek {
  id                    String @id @default(cuid())
  availabilities        Json?
  availabilitiesPeriods Json?
  user                  User?  @relation
}

model Client {
  id           String                  @id @default(cuid())
  proId        String
  clientId     String
  status       String?
  user         User                    @relation("ProfessionalClients", fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  clientUser   User                    @relation("ClientUserRelation", fields: [clientId], references: [id])
  reservations ReservationServicePro[]
}

model ReservationServicePro {
  id                String   @id @default(cuid())
  date              String
  time              String
  address           String?
  city              String?
  postalCode        String?
  addressComplement String?
  note              String?
  status            String?
  service           Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)
  serviceId         String
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId            String
  client            Client?  @relation(fields: [clientId], references: [id], onDelete: Cascade)
  clientId          String?
  clientIdTest      String
  dateOfRdv         String
  createdAt         DateTime @default(now())
  reason            String?
  hiddenForPro      Boolean   @default(false)
  hiddenForUser     Boolean   @default(false)
}


model Service {
  id           String                  @id @default(cuid())
  title        String
  description  String
  category     String
  price        String
  domicile     Boolean
  createdAt    DateTime                @default(now())
  updatedAt    DateTime?               @updatedAt
  dureeRDV     String
  valueDureeRDV Int?
  userId       String
  user         User                    @relation(fields: [userId], references: [id], onDelete: Cascade)
  reservations ReservationServicePro[]
}

model Post {
  id                          Int      @id @default(autoincrement())
  image                       String
  title                       String
  description                 String
  durationWeekStartHour       Int
  durationWeekStartMinute     Int
  durationWeekEndHour         Int
  durationWeekEndMinute       Int
  durationSaturdayStartHour   Int
  durationSaturdayStartMinute Int
  durationSaturdayEndHour     Int
  durationSaturdayEndMinute   Int
  price                       Int      @default(0)
  weekPrice                   String
  saturdayPrice               String
  stock                       Int
  valide                      Boolean  @default(true)
  alt                         String?
  createdAt                   DateTime @default(now())
  updatedAt                   DateTime @updatedAt
  idStripe                    String   @unique
  product                     Product  @relation(fields: [idStripe], references: [stripeId])
  room                        Room?
}

model Formation {
  id          String    @id @default(cuid())
  image       String
  alt         String
  title       String
  description String
  price       Float
  quantity    Int
  dates       Json
  deposit     Float
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  idStripe    String    @unique
  product     Product   @relation(fields: [idStripe], references: [stripeId])
  
}

model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt
  items     CartItem[]
}



model Product {
  stripeId          String             @id @unique
  prodType          ProductType
  post              Post?
  additionalService AdditionalService?
  formationDates    Json?              
  boosterDates      Json?
  formation         Formation[]
  businessBooster   BusinessBooster?
  cartItems         CartItem[]
}

model AdditionalService {
  id          String   @id @default(cuid())
  image       String
  alt         String
  title       String
  description String
  price       Float
  sales       Int?
  quantity    Int
  type        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  idStripe    String   @unique
  product     Product  @relation(fields: [idStripe], references: [stripeId])
  order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?
}

model Test {
  id String @id @default(cuid())
}

model BusinessBooster {
  id          String   @id @default(cuid())
  image       String?
  alt         String
  title       String
  description String
  quantity    Int
  price       Float
  dates       Json
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  idStripe    String?  @unique
  product     Product? @relation(fields: [idStripe], references: [stripeId])
  order       Order?   @relation(fields: [orderId], references: [id])
  orderId     String?
}

model Reservation {
  id             String            @id @default(cuid())
  personalId     String?
  professionalId String?
  userId         String
  postId         Int
  roomId         String?
  status         ReservationStatus
  reason         String?
  price          Float
  date           DateTime
  createdAt      DateTime          @default(now())
  updatedAt      DateTime?         @updatedAt
  order          Order?            @relation(fields: [orderId], references: [id])
  orderId        String?
}

model Review {
  id             String           @id @default(uuid())
  userId         String
  status         String
  professionalId String
  rating         Int
  archived       Boolean?
  comment        String?
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  author         User             @relation("ReviewsWritten", fields: [userId], references: [id],  onDelete: Cascade)
  professional   User             @relation("ReviewsReceived", fields: [professionalId], references: [id], onDelete: Cascade)
  responses      ReviewResponse[]
}

model ReviewResponse {
  id        String   @id @default(uuid())
  reviewId  String
  response  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  review Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model Notification {
  id        String   @id @default(cuid())
  title     String
  userId    String
  timestamp DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Transaction {
  id                 String   @id @default(cuid())
  amount             Int
  amountExcludingTax Int
  amountIncludingTax Int
  createdAt          DateTime @default(now())
}


model Subscription {
  id          String           @id @default(cuid())
  title       String
  description String
  price       Int
  arguments   Json[]
  type        SubscriptionType
  createdAt   DateTime         @default(now())
  updatedAt   DateTime?        @updatedAt
}

model Category {
  id         String    @id @default(cuid())
  title      String
  imageLogo  String
  imageMinia String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime? @updatedAt
}

model Try {
  id String @id @default(cuid())
}

model Room {
  id     Int    @id @default(autoincrement())
  name   String
  stock  Int
  postId Int    @unique
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

}

model Abonnement {
  id               Int      @id @default(autoincrement())
  title            String
  price            Int
  nbrEssaisGratuit Int
  freePeriod       Int
  period           String
  functions        Json
  stripeProductId  String?
  stripePriceId    String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
}
model CartItem {
  id        String    @id @default(uuid())
  cart      Cart      @relation(fields: [cartId], references: [id])
  cartId    String
  product   Product   @relation(fields: [productId], references: [stripeId])
  productId String
  quantity  Int       @default(1)
  title     String
  price     Float
  order     Order?    @relation(fields: [orderId], references: [id]) 
  orderId   String? 
  createdAt DateTime  @default(now())
  updatedAt DateTime?
}


model Order {
  id                 String              @id @default(cuid())
  user               User                @relation(fields: [userId], references: [id])
  userId             String              
  reservations       Reservation[]     
  boosters           BusinessBooster[]   
  additionalServices AdditionalService[] 
  cartItems          CartItem[]          
  createdAt          DateTime            @default(now())
  updatedAt          DateTime?           @updatedAt
  sessionId         String               @unique             
}


